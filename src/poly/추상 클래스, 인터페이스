
// 추상 클래스와 인터페이스

1. 추상 클래스1
   - 동물(Animal)과 같이 부모 클래스는 제공하지만, 실제 생성되면 안되는 클래스를 추상 클래스라 한다.
   - 추상 클래스는 이름 그대로 추상적인 개념을 제공하는 클래스이다. 따라서 인스턴스가 존재하지 않는다.
   - 상속을 목적으로 사용되고, 부모 클래스 역할을 담당함.
   ( abstract class AbstractAnimal {...} )

2. 추상 메서드
   - 부모 클래스를 상속 받는 자식 클래스가 반드시 오버라이딩 해야 하는 메서드를 부모 클래스에 정의 할 수 있음.
   - 추상 메서드는 추상적인 개념을 제공하는 메서드이며 실체가 존재하지 않고, 메서드 바디가 없음.

  // 추상 메서드가 하나라도 있는 클래스는 추상 클래스로 선언해야 한다. //
  // 추상 메서드는 상속 받는 자식 클래스가 반드시 오버라이딩 해서 사용해야 한다. //

3. 추상 클래스2
   - 순수 추상 클래스: 모든 메서드가 추상 메서드인 추상 클래스
   - 앞서 만든 예제(ex3) 는 하나만 추상 메서드였다.
   - 해당 클래스에 모든 메서드를 추상 메서드로 정의하면 이러한 클래스를 순수 추상 클래스라 한다.


4. 인터페이스
   - 순수 추상 클래스를 더 편리하게 사용할 수 있는 인터페이스 기능 제공
   - 인터페이스는 class가 아니라 interface 키워드를 사용
   - 인터페이스의 메서드는 모두 public, abstract 이다.
   - 메서드는 public abstract 를 생략할 수 있다. ( 생략 권장 )
   - 다중 구현(다중 상속)을 지원함
   - 인터페이스를 상속 받을 때는 extends 대신에 implements 라는 구현이라는 키워드 사용(인터페이스는 상속이라고 하지 않고 구현이라고 함)


   1) 인터페이스의 멤버 변수
      - public, static, final 이 모두 포함되었다고 간주한다. 무조건 상수임.


// 인터페이스를 사용해야 하는 이유
   - 제약 : 인터페이스를 만드는 이유는 인터페이스를 구현하는 곳에서 인터페이스의 메서드를
           반드시 구현하도록 규약(제약)을 주는 것이다. usb 인터페이스... 자동차 인터페이스.. 등등
   - 다중 구현 : 자바에서 클래스 상속은 부모를 하나만 지정할 수 있다. 인터페이스는 부모를 여러명 두는 다중 구현이 가능하다.
