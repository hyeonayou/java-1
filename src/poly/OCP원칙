
// OCP(Open-Closed Principle) 원칙
- 객체 지향 설계 원칙 중 하나로 OCP 원칙이 있음.

  ** Open for extension: 새로운 기능의 추가나 변경 사항이 생겼을 때, 기존 코드는 확장할 수 있어야 한다.
  ** Closed for modification: 기존의 코드는 수정되지 않아야 한다.

  확장에는 열려있고, 변경에는 닫혀 있다는 뜻.
  기존의 코드 수정 없이 새로운 기능을 추가할 수 있다는 의미

  앞서 개발한 car1 패키지를 보면,
  여기서 새로운 차량을 추가해도 `Driver` 의 코드는 전혀 변경하지 않는다. 운전할 수 있는 차량의 종류가 계속 늘어나도
  `Car` 를 사용하는 `Driver` 의 코드는 전혀 변경하지 않는다.
  즉, 기능을 확장해도 main() 일부를 제외한 프로그램의 핵심 부분의 코드는 전혀 수정하지 않아도 된다.

  ** 변하는 부분
  `main()` 과 같이 새로운 차를 생성하고 `Driver` 에게 필요한 차를 전달해주는 역할은 당연히 코드 수정이 발생한다.
  `main()` 은 전체 프로그램을 설정하고 조율하는 역할을 한다. 이런 부분은 OCP를 지켜도 변경이 필요하다.