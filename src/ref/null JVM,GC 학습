
어떠한 클래스 인스턴스를 생성했다가
해당 인스턴스를 Null 로 할당해주면
해당 인스턴스를 참조할 수 없게된다.

이렇게 해당 인스턴스에 다시 접근할 방법이 없고,
아무도 참조하지 않는 인스턴스는 사용되지 않고 메모리에 용량만 차지하게 된다.

1.  C 와 같은 과거 프로그래밍 언어는 개발자가 직접 명령어를 사용하여 인스턴스를 메모리에서 제거해야했다.
    만약 실수로 인스턴스 삭제를 누락하면 메모리에 사용하지 않는 객체가 가득해져서 메모리 부족 오류가 발생하게 된다.

    "자바는 이러한 과정을 자동으로 처리해준다.
    아무도 참조하지 않는 인스턴스가 있다면 JVM의 GC(가비지 컬렉션)가 더 이상 사용하지 않는 인스턴스라
    판단하고 해당 인스턴스를 자동으로 메모리에서 제거해준다."

2.  NullPointerException
    만약 참조값 없이 객체를 찾아가면 어떤 문제가 발생할까?
    이 경우 `NullPointerException` 이라는 예외가 발생하는데, 개발자를 가장 많이 괴롭히는 예외이다.
    `NullPointerException` 은 이름 그대로 `null` 을 가리키다(Pointer)인데, 이때 발생하는 예외(Exception)다.
    `null` 은 없다는 뜻이므로 결국 주소가 없는 곳을 찾아갈 때 발생하는 예외이다.

    객체를 참조할 때는 `.` (dot)을 사용한다. 이렇게 하면 참조값을 사용해서 해당 객체를 찾아갈 수 있다. 그런데 참조값이
    `null` 이라면 값이 없다는 뜻이므로, 찾아갈 수 있는 객체(인스턴스)가 없다. `NullPointerException` 은 이처럼
    `null` 에 `.` (dot)을 찍었을 때 발생한다.
    